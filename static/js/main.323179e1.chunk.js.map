{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","cameraPhoto","useState","img","setImg","torch","setTorch","ccc","videoElement","document","getElementById","CameraPhoto","_getStreamDevice","FACING_MODES","ENVIRONMENT","then","stream","video","querySelector","srcObject","track","getVideoTracks","addEventListener","e","window","setTimeout","capabilities","getCapabilities","console","log","applyConstraints","advanced","catch","err","error","startCamera","useEffect","className","src","alt","autoPlay","id","Button","onClick","dataUri","getDataUri","sizeFactor","stopCamera","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"6IAAAA,EAAOC,QAAU,IAA0B,kC,qJCyH5BC,MAlHf,WAAgB,IAqCVC,EArCS,EACSC,mBAAS,MADlB,mBACNC,EADM,KACDC,EADC,OAEaF,oBAAS,GAFtB,mBAENG,EAFM,KAECC,EAFD,KAuCPC,EAAM,WACV,IAAIC,EAAeC,SAASC,eAAe,UAC3CT,EAAc,IAAIU,IAAYH,IAG3BI,iBAAiBC,eAAaC,YAAa,IAC3CC,MAAK,SAACC,GACL,IAAMC,EAAQR,SAASS,cAAc,SACrCD,EAAME,UAAYH,EAGlB,IAAMI,EAAQJ,EAAOK,iBAAiB,GAEtCJ,EAAMK,iBAAiB,kBAAkB,SAACC,GACxCC,OAAOC,YACL,kBAKyBC,EALCN,EAAMO,kBAMlCC,QAAQC,IAAI,SAAUH,QAClBA,EAAarB,OACfe,EACGU,iBAAiB,CAChBC,SAAU,CAAC,CAAE1B,MAAOA,MAErB2B,OAAM,SAACT,GAAD,OAAOK,QAAQC,IAAIN,OAPhC,IAA6BG,IAJzB,WAeLM,OAAM,SAACC,GAAD,OAASL,QAAQM,MAAM,0BAA2BD,MAE3DhC,EACGkC,YAAYtB,eAAaC,aACzBC,MAAK,WACJa,QAAQC,IAAI,uBAEbG,OAAM,SAACE,GACNN,QAAQM,MAAM,sBAAuBA,OAoB3C,OAhBAE,qBAAU,WAER7B,MACC,IAcD,yBAAK8B,UAAU,OACb,6BACW,OAARlC,EACC,yBAAKmC,IAAKnC,EAAKoC,IAAI,QAEnB,6BACE,2BAAOC,UAAQ,EAACC,GAAG,UACnB,kBAACC,EAAA,EAAD,CAAQC,QAnBF,WACd,IAGIC,EAAU3C,EAAY4C,WAHX,CACbC,WAAY,IAGdlB,QAAQC,IAAIe,GACZxC,EAAOwC,GACPtC,GAAS,GACTL,EAAY8C,eAWJ,iBCrGQC,QACW,cAA7BxB,OAAOyB,SAASC,UAEe,UAA7B1B,OAAOyB,SAASC,UAEhB1B,OAAOyB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF7C,SAASC,eAAe,SDyHpB,kBAAmB6C,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEd3B,OAAM,SAAAE,GACLN,QAAQM,MAAMA,EAAM0B,c","file":"static/js/main.323179e1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect, useRef, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport CameraPhoto, { FACING_MODES } from \"jslib-html5-camera-photo\";\nimport Button from \"react-bootstrap/Button\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  const [img, setImg] = useState(null);\n  const [torch, setTorch] = useState(true);\n\n  const cameraInitialization = () => {\n    navigator.mediaDevices\n      .getUserMedia({\n        video: {\n          facingMode: \"environment\",\n        },\n      })\n      .then((stream) => {\n        const video = document.querySelector(\"video\");\n        video.srcObject = stream;\n\n        // get the active track of the stream\n        const track = stream.getVideoTracks()[0];\n\n        video.addEventListener(\"loadedmetadata\", (e) => {\n          window.setTimeout(\n            () => onCapabilitiesReady(track.getCapabilities()),\n            500\n          );\n        });\n\n        function onCapabilitiesReady(capabilities) {\n          if (capabilities.torch) {\n            track\n              .applyConstraints({\n                advanced: [{ torch: true }],\n              })\n              .catch((e) => console.log(e));\n          }\n        }\n      })\n      .catch((err) => console.error(\"getUserMedia() failed: \", err));\n  };\n  let cameraPhoto;\n\n  const ccc = () => {\n    let videoElement = document.getElementById(\"video\");\n    cameraPhoto = new CameraPhoto(videoElement);\n\n    cameraPhoto\n      ._getStreamDevice(FACING_MODES.ENVIRONMENT, {})\n      .then((stream) => {\n        const video = document.querySelector(\"video\");\n        video.srcObject = stream;\n\n        // get the active track of the stream\n        const track = stream.getVideoTracks()[0];\n\n        video.addEventListener(\"loadedmetadata\", (e) => {\n          window.setTimeout(\n            () => onCapabilitiesReady(track.getCapabilities()),\n            500\n          );\n        });\n\n        function onCapabilitiesReady(capabilities) {\n          console.log(\"heyyyy\", capabilities);\n          if (capabilities.torch) {\n            track\n              .applyConstraints({\n                advanced: [{ torch: torch }],\n              })\n              .catch((e) => console.log(e));\n          }\n        }\n      })\n      .catch((err) => console.error(\"getUserMedia() failed: \", err));\n\n    cameraPhoto\n      .startCamera(FACING_MODES.ENVIRONMENT)\n      .then(() => {\n        console.log(\"Camera started !\");\n      })\n      .catch((error) => {\n        console.error(\"Camera not started!\", error);\n      });\n  };\n\n  useEffect(() => {\n    // cameraInitialization();\n    ccc();\n  }, []);\n\n  const takePic = () => {\n    const config = {\n      sizeFactor: 1,\n    };\n    let dataUri = cameraPhoto.getDataUri(config);\n    console.log(dataUri);\n    setImg(dataUri);\n    setTorch(false);\n    cameraPhoto.stopCamera();\n  };\n\n  return (\n    <div className=\"App\">\n      <div>\n        {img !== null ? (\n          <img src={img} alt=\"hey\" />\n        ) : (\n          <div>\n            <video autoPlay id=\"video\"></video>\n            <Button onClick={takePic}> Capture </Button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}